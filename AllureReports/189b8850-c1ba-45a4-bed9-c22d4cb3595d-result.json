{"name": "test_login_param_001[getDataForLogin2]", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x762e41e54dc0>, method = 'POST', url = '/session/e7f3c3294737ea63b415ec9b027745be/element'\nbody = '{\"using\": \"xpath\", \"value\": \"//*[@id=\\\\\"email\\\\\"]\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.17.2 (python linux)'}\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None), redirect = False, assert_same_host = False\ntimeout = <object object at 0x762e4cb34e20>, pool_timeout = None, release_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://localhost:33467/session/e7f3c3294737ea63b415ec9b027745be/element'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/e7f3c3294737ea63b415ec9b027745be/element', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True, http_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:449: in _make_request\n    six.raise_from(e, None)\n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:444: in _make_request\n    httplib_response = conn.getresponse()\n../../../anaconda3/lib/python3.9/http/client.py:1371: in getresponse\n    response.begin()\n../../../anaconda3/lib/python3.9/http/client.py:319: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x762e41e54580>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n../../../anaconda3/lib/python3.9/http/client.py:288: RemoteDisconnected\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_Login_Params.Test_Login_Page_Param object at 0x762e41ff8c40>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7f3c3294737ea63b415ec9b027745be\")>\ngetDataForLogin = ('admin@phptravels.com', 'demoadmin1', 'Fail')\n\n    @pytest.mark.regression\n    def test_login_param_001(self, setup, getDataForLogin):\n        self.driver = setup\n        self.log = LogGenerator.log_gen()\n        self.lp = LoginPage(self.driver)\n        self.log.info(\"Starting test_login_param_001\")\n        self.log.info(\"Launching Browser\")\n        self.driver.get(self.url)\n        self.log.info(\"Going to this URL-->\" + self.url)\n>       self.lp.enter_email(getDataForLogin[0])\n\nTestCases/test_Login_Params.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Login_POM.py:18: in enter_email\n    element = self.wait.until(ec.presence_of_element_located(LoginPage.text_email_xpath))\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    response = self.command_executor.execute(driver_command, params)\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py:302: in execute\n    return self._request(command_info[0], url, body=data)\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py:322: in _request\n    response = self._conn.request(method, url, body=body, headers=headers)\n../../../anaconda3/lib/python3.9/site-packages/urllib3/request.py:78: in request\n    return self.request_encode_body(\n../../../anaconda3/lib/python3.9/site-packages/urllib3/request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n../../../anaconda3/lib/python3.9/site-packages/urllib3/poolmanager.py:376: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:787: in urlopen\n    retries = retries.increment(\n../../../anaconda3/lib/python3.9/site-packages/urllib3/util/retry.py:550: in increment\n    raise six.reraise(type(error), error, _stacktrace)\n../../../anaconda3/lib/python3.9/site-packages/urllib3/packages/six.py:769: in reraise\n    raise value.with_traceback(tb)\n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703: in urlopen\n    httplib_response = self._make_request(\n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:449: in _make_request\n    six.raise_from(e, None)\n<string>:3: in raise_from\n    ???\n../../../anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:444: in _make_request\n    httplib_response = conn.getresponse()\n../../../anaconda3/lib/python3.9/http/client.py:1371: in getresponse\n    response.begin()\n../../../anaconda3/lib/python3.9/http/client.py:319: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x762e41e54580>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))\n\n../../../anaconda3/lib/python3.9/http/client.py:288: ProtocolError"}, "attachments": [{"name": "log", "source": "aa5b1da1-d91c-480b-8138-e86814203e63-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "getDataForLogin", "value": "('admin@phptravels.com', 'demoadmin1', 'Fail')"}], "start": 1729068426624, "stop": 1729068475718, "uuid": "cc9141b7-e223-41c8-8e7b-4ddab1594903", "historyId": "f25ceddd543238ffc2f116436630ee0c", "testCaseId": "c632c8aa9b21e26247eedf055755296f", "fullName": "TestCases.test_Login_Params.Test_Login_Page_Param#test_login_param_001", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_Login_Params"}, {"name": "subSuite", "value": "Test_Login_Page_Param"}, {"name": "host", "value": "nsl42"}, {"name": "thread", "value": "139826-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_Login_Params"}]}