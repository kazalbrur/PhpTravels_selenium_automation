{"name": "test_hotel_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <TestCases.test_hotel_page.Test_HotelSearch object at 0x7480210a06d0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e6ae7d0977d6723953e4ae2c4aefafde\")>\n\n    @pytest.mark.sanity\n    def test_hotel_search(self, setup):\n        # Initialize the page object and log the start of the test\n        self.log.info(\"Starting test_hotel_search\")\n        self.hotel_page = HOTELTRAVEL(setup)\n    \n        # Load the page\n        self.log.info(\"Loading the hotel booking page\")\n>       self.hotel_page.load_page()\n\nTestCases/test_hotel_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/hotel_page.py:24: in load_page\n    self.wait.until(EC.title_contains(\"PHPTRAVELS\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e6ae7d0977d6723953e4ae2c4aefafde\")>\nmethod = <function title_contains.<locals>._predicate at 0x74802105edc0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "c55590fe-3142-426f-8ec8-d5793d64ea47-attachment.txt", "type": "text/plain"}], "start": 1729080137235, "stop": 1729080151131, "uuid": "4ee02887-7148-4f5d-bd5f-be802590358f", "historyId": "861bfe5573625000ba49b05b31a87f47", "testCaseId": "861bfe5573625000ba49b05b31a87f47", "fullName": "TestCases.test_hotel_page.Test_HotelSearch#test_hotel_search", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_hotel_page"}, {"name": "subSuite", "value": "Test_HotelSearch"}, {"name": "host", "value": "nsl42"}, {"name": "thread", "value": "52518-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_hotel_page"}]}