{
    "name": "test_Add_User_001",
    "status": "broken",
    "statusDetails": {
        "message": "NameError: name 'ElementClickInterceptedException' is not defined",
        "trace": "self = <pages.Add_User_POM.Add_User object at 0x73e04913c850>\n\n    def click_users_dropdown(self):\n        ele = self.wait.until(ec.element_to_be_clickable(Add_User.click_users_dropdown_xpath))\n        try:\n>           ele.click()\n\npages/Add_User_POM.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x73e0491aaee0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5cb1c3604e7c \\\\u003Cunknown>\\\\n#22 0x7f978349ca94 \\\\u003Cunknown>\\\\n#23 0x7f9783529c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"text-start btn btn-outline-light btn-toggle  collapsed w-100 gap-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#users-collapse\" aria-expanded=\"false\">...</button> is not clickable at point (120, 227). Other element would receive the click: <div class=\"bodyload\" style=\"opacity: 0.175276;\">...</div>\nE         (Session info: chrome=129.0.6668.70)\nE       Stacktrace:\nE       #0 0x5cb1c360602a <unknown>\nE       #1 0x5cb1c32ec5e0 <unknown>\nE       #2 0x5cb1c3342866 <unknown>\nE       #3 0x5cb1c334078d <unknown>\nE       #4 0x5cb1c333e237 <unknown>\nE       #5 0x5cb1c333d646 <unknown>\nE       #6 0x5cb1c3330a98 <unknown>\nE       #7 0x5cb1c3360b22 <unknown>\nE       #8 0x5cb1c3330478 <unknown>\nE       #9 0x5cb1c3360cee <unknown>\nE       #10 0x5cb1c337fd7d <unknown>\nE       #11 0x5cb1c33608c3 <unknown>\nE       #12 0x5cb1c332e6b3 <unknown>\nE       #13 0x5cb1c332f68e <unknown>\nE       #14 0x5cb1c35d0a2b <unknown>\nE       #15 0x5cb1c35d49b1 <unknown>\nE       #16 0x5cb1c35bd225 <unknown>\nE       #17 0x5cb1c35d5532 <unknown>\nE       #18 0x5cb1c35a238f <unknown>\nE       #19 0x5cb1c35f4f28 <unknown>\nE       #20 0x5cb1c35f50f3 <unknown>\nE       #21 0x5cb1c3604e7c <unknown>\nE       #22 0x7f978349ca94 <unknown>\nE       #23 0x7f9783529c3c <unknown>\n\n../../../anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_Add_User.Test_Add_User object at 0x73e0537c55e0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1dbe367ca399e76b6daf7326cd473c26\")>\n\n    @pytest.mark.sanity\n    def test_Add_User_001(self, setup):\n        self.driver = setup\n        self.log = LogGenerator.log_gen()\n        self.lp = LoginPage(self.driver)\n        self.au = Add_User(self.driver)\n    \n        self.log.info(\"Starting test_Add_User_001\")\n        self.log.info(\"Launching Browser\")\n        self.driver.get(self.url)\n        self.log.info(\"Going to this URL-->\" + self.url)\n        self.lp.enter_email(self.email)\n        self.log.info(\"Entering Email-->\" + self.email)\n        self.lp.enter_pwd(self.pwd)\n        self.log.info(\"Entering Password-->\" + self.pwd)\n        self.lp.click_login_button()\n        self.log.info(\"Clicking on Login Button\")\n    \n>       self.au.click_users_dropdown()\n\nTestCases/test_Add_User.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.Add_User_POM.Add_User object at 0x73e04913c850>\n\n    def click_users_dropdown(self):\n        ele = self.wait.until(ec.element_to_be_clickable(Add_User.click_users_dropdown_xpath))\n        try:\n            ele.click()\n>       except ElementClickInterceptedException: # type: ignore\nE       NameError: name 'ElementClickInterceptedException' is not defined\n\npages/Add_User_POM.py:36: NameError"
    },
    "attachments": [
        {
            "name": "log",
            "source": "b403774a-3a78-46ba-bb0c-4d12dc690867-attachment.txt",
            "type": "text/plain"
        }
    ],
    "start": 1729066936414,
    "stop": 1729066939653,
    "uuid": "9987be12-ea56-48f5-9d41-34473b9bec04",
    "historyId": "b95f26efa5da2d61bda7dc3ef427218c",
    "testCaseId": "b95f26efa5da2d61bda7dc3ef427218c",
    "fullName": "TestCases.test_Add_User.Test_Add_User#test_Add_User_001",
    "labels": [
        {
            "name": "tag",
            "value": "sanity"
        },
        {
            "name": "parentSuite",
            "value": "TestCases"
        },
        {
            "name": "suite",
            "value": "test_Add_User"
        },
        {
            "name": "subSuite",
            "value": "Test_Add_User"
        },
        {
            "name": "host",
            "value": "nsl42"
        },
        {
            "name": "thread",
            "value": "129896-MainThread"
        },
        {
            "name": "framework",
            "value": "pytest"
        },
        {
            "name": "language",
            "value": "cpython3"
        },
        {
            "name": "package",
            "value": "TestCases.test_Add_User"
        }
    ]
}